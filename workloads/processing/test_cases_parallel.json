{
  "configuration": {
    "short_tasks": 39,
    "long_tasks": 1,
    "total_tasks": 40
  },
  "test_cases": [
    {
      "id": "compression",
      "name": "File Compression",
      "description": "Compression of mixed-size files with severe load imbalance",
      "category": "file_processing",
      "small_setup": [
        "mkdir -p test_data",
        "seq 1 3000000 > test_data/short_file.dat",
        "cp $ORIGINAL_CWD/assets/compression.py .",
        "cp compression.py small_compression.py",
        "chmod +x small_compression.py"
      ],
      "large_setup": [
        "mkdir -p test_data",
        "seq 1 20000000 > test_data/large_file.dat",
        "cp $ORIGINAL_CWD/assets/compression.py .",
        "cp compression.py large_compression.py",
        "chmod +x large_compression.py"
      ],
      "small_commands": [
        "python3 small_compression.py test_data/short_file.dat 9"
      ],
      "large_commands": [
        "python3 large_compression.py test_data/large_file.dat 9"
      ],
      "cleanup_commands": [
        "rm -rf test_data/",
        "rm -f *.gz",
        "rm -f small_compression.py large_compression.py compression.py"
      ],
      "dependencies": ["python3"]
    },
    {
      "id": "video_transcode",
      "name": "FFmpeg Video Transcode",
      "description": "Video transcoding with one large file dominating processing time",
      "category": "media_processing",
      "small_setup": [
        "mkdir -p clips out",
        "ffmpeg -f lavfi -i testsrc=duration=30:size=320x240:rate=30 -loglevel quiet clips/short.mp4",
        "cp $ORIGINAL_CWD/assets/video_transcode.cpp .",
        "g++ -o small_video_transcode video_transcode.cpp -lavformat -lavcodec -lavutil -lswscale -lpthread -lm -lz"
      ],
      "large_setup": [
        "mkdir -p clips out",
        "ffmpeg -f lavfi -i testsrc=duration=70:size=1920x1080:rate=30 -loglevel quiet clips/long.mp4",
        "cp $ORIGINAL_CWD/assets/video_transcode.cpp .",
        "g++ -o large_video_transcode video_transcode.cpp -lavformat -lavcodec -lavutil -lswscale -lpthread -lm -lz"
      ],
      "small_commands": [
        "./small_video_transcode clips/short.mp4 out/short_out.mp4 640"
      ],
      "large_commands": [
        "./large_video_transcode clips/long.mp4 out/long_out.mp4 640"
      ],
      "cleanup_commands": [
        "rm -rf clips/ out/",
        "rm -f small_video_transcode large_video_transcode video_transcode.cpp"
      ],
      "dependencies": ["ffmpeg", "g++"]
    },
    {
      "id": "ctest_suite",
      "name": "CTest Suite with Slow Integration Test",
      "description": "Test suite with fast unit tests and one slow integration test",
      "category": "software_testing",
      "small_setup": [
        "cp $ORIGINAL_CWD/assets/short.c .",
        "gcc -O2 short.c -lm -o short"
      ],
      "large_setup": [
        "cp $ORIGINAL_CWD/assets/long.c .",
        "gcc -O2 long.c -lm -o long"
      ],
      "small_commands": [
        "./short"
      ],
      "large_commands": [
        "./long"
      ],
      "cleanup_commands": [
        "rm -f assets/short assets/long"
      ],
      "dependencies": ["gcc"]
    },
    {
      "id": "git_add_different",
      "name": "Git Add Different Size Directories",
      "description": "Git add operations with different numbers of files",
      "category": "version_control",
      "small_setup": [
        "mkdir -p small_repo && cd small_repo && git init",
        "cd small_repo && git config user.name 'Test User' && git config user.email 'test@example.com'",
        "cd small_repo && dd if=/dev/urandom of=large_file_1.bin bs=20M count=1 2>/dev/null",
        "cd small_repo && dd if=/dev/urandom of=large_file_2.bin bs=20M count=1 2>/dev/null"
      ],
      "large_setup": [
        "mkdir -p large_repo && cd large_repo && git init",
        "cd large_repo && git config user.name 'Test User' && git config user.email 'test@example.com'",
        "cd large_repo && dd if=/dev/urandom of=huge_file_1.bin bs=100M count=1 2>/dev/null",
        "cd large_repo && dd if=/dev/urandom of=huge_file_2.bin bs=100M count=1 2>/dev/null"
      ],
      "small_commands": [
        "cd small_repo && git add ."
      ],
      "large_commands": [
        "cd large_repo && git add ."
      ],
      "cleanup_commands": [
        "rm -rf small_repo/ large_repo/"
      ],
      "dependencies": ["git"]
    },
    {
      "id": "file_checksum",
      "name": "Parallel File System Operations",
      "description": "Checksum operations with one large file blocking completion",
      "category": "file_processing",
      "small_setup": [
        "mkdir -p large-dir",
        "dd if=/dev/urandom of=large-dir/short_file.dat bs=1M count=200 2>/dev/null",
        "cp $ORIGINAL_CWD/assets/file_checksum.py .",
        "cp file_checksum.py small_file_checksum.py",
        "chmod +x small_file_checksum.py"
      ],
      "large_setup": [
        "mkdir -p large-dir",
        "dd if=/dev/urandom of=large-dir/long_file.dat bs=1M count=1000 2>/dev/null",
        "cp $ORIGINAL_CWD/assets/file_checksum.py .",
        "cp file_checksum.py large_file_checksum.py",
        "chmod +x large_file_checksum.py"
      ],
      "small_commands": [
        "python3 small_file_checksum.py large-dir/short_file.dat"
      ],
      "large_commands": [
        "python3 large_file_checksum.py large-dir/long_file.dat"
      ],
      "cleanup_commands": [
        "rm -rf large-dir/",
        "rm -f checksums.txt",
        "rm -f small_file_checksum.py large_file_checksum.py file_checksum.py"
      ],
      "dependencies": ["python3"]
    },
    {
      "id": "hotkey_aggregation",
      "name": "Hot Key Aggregation",
      "description": "Analytics with skewed data distribution (hot key problem)",
      "category": "data_processing",
      "small_setup": [
        "cp $ORIGINAL_CWD/assets/spark_skew_prepare.py $ORIGINAL_CWD/assets/spark_skew_test.py .",
        "cp spark_skew_test.py small_spark_skew_test.py",
        "chmod +x spark_skew_prepare.py small_spark_skew_test.py",
        "python3 spark_skew_prepare.py --regular-keys 8000 --hot-keys 15000 --output spark_small.csv"
      ],
      "large_setup": [
        "cp $ORIGINAL_CWD/assets/spark_skew_prepare.py $ORIGINAL_CWD/assets/spark_skew_test.py .",
        "cp spark_skew_test.py large_spark_skew_test.py",
        "chmod +x spark_skew_prepare.py large_spark_skew_test.py",
        "python3 spark_skew_prepare.py --regular-keys 100000 --hot-keys 800000 --output spark_large.csv"
      ],
      "small_commands": [
        "python3 small_spark_skew_test.py spark_small.csv"
      ],
      "large_commands": [
        "python3 large_spark_skew_test.py spark_large.csv"
      ],
      "cleanup_commands": [
        "rm -f spark_small.csv spark_large.csv",
        "rm -f small_spark_skew_test.py large_spark_skew_test.py spark_skew_prepare.py spark_skew_test.py"
      ],
      "dependencies": ["python3"]
    },
    {
      "id": "log_processing",
      "name": "Log Processing with Skewed Chunks",
      "description": "Processing log files with different sizes and compression",
      "category": "data_processing",
      "small_setup": [
        "mkdir -p log_chunks",
        "seq 1 500000 | awk '{print strftime(\"%Y-%m-%d %H:%M:%S\"), \"[INFO]\", \"Request from\", \"192.168.1.\"int(rand()*255), \"processed in\", int(rand()*100), \"ms\"}' > log_chunks/small.log"
      ],
      "large_setup": [
        "mkdir -p log_chunks",
        "seq 1 7000000 | awk '{print strftime(\"%Y-%m-%d %H:%M:%S\"), \"[INFO]\", \"Request from\", \"192.168.1.\"int(rand()*255), \"processed in\", int(rand()*100), \"ms\"}' > log_chunks/large.log"
      ],
      "small_commands": [
        "gzip -c log_chunks/small.log | zcat | grep -E '\\[INFO\\]' | awk '{print $4}' | sort | uniq -c | sort -nr > log_chunks/small_ips.txt"
      ],
      "large_commands": [
        "gzip -c log_chunks/large.log | zcat | grep -E '\\[INFO\\]' | awk '{print $4}' | sort | uniq -c | sort -nr > log_chunks/large_ips.txt"
      ],
      "cleanup_commands": [
        "rm -rf log_chunks/"
      ],
      "dependencies": ["gzip", "grep", "awk", "sort", "uniq"]
    },
    {
      "id": "ddos_log_analysis",
      "name": "DDoS Log Analysis",
      "description": "Security log analysis with temporal spike pattern (DDoS simulation)",
      "category": "data_processing",
      "small_setup": [
        "cp $ORIGINAL_CWD/assets/pandas_etl_prepare.py $ORIGINAL_CWD/assets/pandas_etl_test.py .",
        "cp pandas_etl_test.py small_pandas_etl_test.py",
        "chmod +x pandas_etl_prepare.py small_pandas_etl_test.py",
        "python3 pandas_etl_prepare.py --normal-logs 30000 --error-logs 8000 --output etl_small.gz"
      ],
      "large_setup": [
        "cp $ORIGINAL_CWD/assets/pandas_etl_prepare.py $ORIGINAL_CWD/assets/pandas_etl_test.py .",
        "cp pandas_etl_test.py large_pandas_etl_test.py",
        "chmod +x pandas_etl_prepare.py large_pandas_etl_test.py",
        "python3 pandas_etl_prepare.py --normal-logs 1000000 --error-logs 500000 --output etl_large.gz"
      ],
      "small_commands": [
        "python3 small_pandas_etl_test.py etl_small.gz"
      ],
      "large_commands": [
        "python3 large_pandas_etl_test.py etl_large.gz"
      ],
      "cleanup_commands": [
        "rm -f etl_small.gz etl_large.gz",
        "rm -f /tmp/pandas_*",
        "rm -f small_pandas_etl_test.py large_pandas_etl_test.py pandas_etl_prepare.py pandas_etl_test.py"
      ],
      "dependencies": ["python3", "gzip", "awk"]
    },
    {
      "id": "viral_product_analytics",
      "name": "Viral Product Analytics",
      "description": "Retail analytics with temporal hot product pattern (trending item simulation)",
      "category": "data_processing",
      "small_setup": [
        "cp $ORIGINAL_CWD/assets/flink_join_prepare.py $ORIGINAL_CWD/assets/flink_join_test.py .",
        "cp flink_join_test.py small_flink_join_test.py",
        "chmod +x flink_join_prepare.py small_flink_join_test.py",
        "python3 flink_join_prepare.py --regular-transactions 8000 --hot-transactions 12000 --output flink_small.csv"
      ],
      "large_setup": [
        "cp $ORIGINAL_CWD/assets/flink_join_prepare.py $ORIGINAL_CWD/assets/flink_join_test.py .",
        "cp flink_join_test.py large_flink_join_test.py",
        "chmod +x flink_join_prepare.py large_flink_join_test.py",
        "python3 flink_join_prepare.py --regular-transactions 100000 --hot-transactions 700000 --output flink_large.csv"
      ],
      "small_commands": [
        "python3 small_flink_join_test.py flink_small.csv"
      ],
      "large_commands": [
        "python3 large_flink_join_test.py flink_large.csv"
      ],
      "cleanup_commands": [
        "rm -f flink_small.csv flink_large.csv",
        "rm -f /tmp/flink_*",
        "rm -f small_flink_join_test.py large_flink_join_test.py flink_join_prepare.py flink_join_test.py"
      ],
      "dependencies": ["python3", "awk"]
    }
  ],
  "metadata": {
    "version": "2.1",
    "description": "Long-tail workload test cases with system-level parallel commands",
    "target_platform": "Linux",
    "cpu_count": 8,
    "total_test_cases": 9
  }
}