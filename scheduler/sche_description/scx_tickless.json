{
  "scheduler": {
    "name": "scx_tickless",
    "production_ready": false,
    "description": "An experimental server-oriented scheduler designed to reduce OS noise by minimizing timer ticks. Routes all scheduling events through a pool of primary CPUs, allowing other CPUs to run tickless. Requires kernel booted with nohz_full for full effectiveness. Designed for cloud computing, virtualization, and HPC workloads.",
    "use_cases": [
      "cloud_computing",
      "virtualization",
      "hpc",
      "server_workloads"
    ],
    "algorithm": "primary_cpu_distribution",
    "characteristics": "tick reduction, primary cpu pool, os noise reduction, global task queue, configurable frequency, nohz full requirement, ipc based preemption",
    "tuning_parameters": {
      "primary_domain": {
        "type": "string",
        "description": "CPU mask for primary scheduling CPUs (hex)",
        "default": "0x1"
      },
      "slice_us": {
        "type": "integer",
        "description": "Maximum scheduling slice duration",
        "default": 20000
      },
      "frequency": {
        "type": "integer",
        "description": "Scheduling frequency (0 = CONFIG_HZ)",
        "default": 0
      },
      "prefer_same_cpu": {
        "type": "boolean",
        "description": "Try to keep tasks on same CPU",
        "default": false
      },
      "nosmt": {
        "type": "boolean",
        "description": "Disable SMT topology awareness",
        "default": false
      }
    },
    "requirements": "Linux kernel with nohz_full support",
    "limitations": "Not production ready, experimental, syscall overhead with nohz_full",
    "performance_profile": "optimized for reduced OS noise, not latency"
  }
}