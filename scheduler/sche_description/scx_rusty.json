{
  "scheduler": {
    "name": "scx_rusty",
    "production_ready": true,
    "description": "A production-ready multi-domain scheduler with intelligent load balancing. Creates separate scheduling domains per LLC with user-space load balancing. Features configurable thresholds, greedy task stealing, and support for both FIFO and priority-based scheduling within domains. Architecture-flexible design suitable for various CPU topologies.",
    "use_cases": [
      "general_purpose",
      "multi_architecture",
      "server_workloads"
    ],
    "algorithm": "multi_domain_round_robin",
    "characteristics": "multi domain support, per llc domains, user space load balancing, configurable thresholds, architecture flexibility, greedy task stealing, fifo mode support",
    "tuning_parameters": {
      "slice_us_underutil": {
        "type": "integer",
        "description": "Scheduling slice duration for under-utilized hosts, in microseconds",
        "default": 20000,
        "range": [
          1000,
          100000
        ]
      },
      "slice_us_overutil": {
        "type": "integer",
        "description": "Scheduling slice duration for over-utilized hosts, in microseconds",
        "default": 1000,
        "range": [
          100,
          100000
        ]
      },
      "interval": {
        "type": "float",
        "description": "Load balance interval in seconds",
        "default": 2.0,
        "range": [
          0.1,
          10.0
        ]
      },
      "tune_interval": {
        "type": "float",
        "description": "The tuner runs at a higher frequency than the load balancer to dynamically tune scheduling behavior. Tuning interval in seconds",
        "default": 0.1,
        "range": [
          0.01,
          1.0
        ]
      },
      "load_half_life": {
        "type": "float",
        "description": "The half-life of task and domain load running averages in seconds",
        "default": 1.0,
        "range": [
          0.1,
          10.0
        ]
      },
      "cache_level": {
        "type": "integer",
        "description": "Build domains according to how CPUs are grouped at this cache level",
        "default": 3,
        "range": [
          1,
          4
        ]
      },
      "cpumasks": {
        "type": "string",
        "description": "Manually set the cpumask for each domain (e.g., 0xff_00ff). Each CPU must belong to precisely one domain",
        "default": null
      },
      "greedy_threshold": {
        "type": "integer",
        "description": "When non-zero, enable greedy task stealing. Minimum tasks in a domain before stealing is allowed",
        "default": 1,
        "range": [
          0,
          100
        ]
      },
      "greedy_threshold_x_numa": {
        "type": "integer",
        "description": "When non-zero, enable greedy task stealing across NUMA nodes",
        "default": 0,
        "range": [
          0,
          100
        ]
      },
      "kthreads_local": {
        "type": "boolean",
        "description": "If disabled, kthreads are scheduled like any other task. If enabled, they're scheduled within the same domain as waker and wakee",
        "default": true
      },
      "balanced_kworkers": {
        "type": "boolean",
        "description": "Distribute workers like kworkers across domains evenly",
        "default": false
      },
      "fifo_sched": {
        "type": "boolean",
        "description": "Use FIFO scheduling within domains instead of DSQ weights",
        "default": false
      },
      "direct_greedy_under": {
        "type": "float",
        "description": "When system util below this, tasks are directly dispatched even if this violates domain boundaries",
        "default": 0.0,
        "range": [
          0.0,
          100.0
        ]
      },
      "kick_greedy_under": {
        "type": "float",
        "description": "Greedy threshold delta below which other domains won't be kicked",
        "default": 0.0,
        "range": [
          0.0,
          100.0
        ]
      },
      "direct_greedy_numa": {
        "type": "boolean",
        "description": "Allow direct greedy stealing across NUMA boundaries",
        "default": false
      },
      "partial": {
        "type": "boolean",
        "description": "Skip BPF scheduling for userspace programs with pid < 1000",
        "default": false
      },
      "perf": {
        "type": "integer",
        "description": "Tunable for prioritizing CPU performance by configuring the CPU frequency governor. Valid values are [0, 1024]. Higher values prioritize performance",
        "default": null,
        "range": [
          0,
          1024
        ]
      }
    },
    "limitations": "May not distinguish NUMA nodes well, potential infeasible weights issue",
    "performance_profile": "balanced general-purpose performance"
  }
}