{
  "scheduler": {
    "name": "scx_rustland",
    "production_ready": false,
    "description": "A user-space scheduler written in Rust that prioritizes interactive workloads. Scheduling decisions are made entirely in user-space using a deadline-based algorithm (vruntime + exec_runtime). Tasks are stored in a BTreeSet and dispatched from lowest to highest deadline, favoring latency-sensitive tasks that frequently sleep.",
    "use_cases": [
      "gaming",
      "video_conferencing",
      "live_streaming",
      "interactive_applications"
    ],
    "algorithm": "user_space_deadline",
    "characteristics": "full user space implementation, deadline based ordering, vruntime tracking, exec runtime accounting, interactive prioritization, rust implementation",
    "tuning_parameters": {
      "slice_us": {
        "type": "integer",
        "description": "Scheduling slice duration",
        "default": 20000,
        "range": [
          1000,
          100000
        ]
      },
      "slice_us_min": {
        "type": "integer",
        "description": "Minimum slice duration",
        "default": 1000,
        "range": [
          100,
          10000
        ]
      },
      "percpu_local": {
        "type": "boolean",
        "description": "Dispatch per-CPU tasks directly",
        "default": false
      },
      "partial": {
        "type": "boolean",
        "description": "Only switch SCHED_EXT tasks",
        "default": false
      }
    },
    "limitations": "User-space overhead, not ideal for performance-critical scenarios",
    "performance_profile": "optimized for interactivity over raw performance"
  }
}