{
  "schedulers": {
    "scx_bpfland": {
      "type": "vruntime-based",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "interactive_first",
      "scheduling_algorithm": "weighted_runtime",
      "use_case": "interactive_workloads",
      "workload_types": [
        "gaming",
        "live_streaming",
        "multimedia",
        "real_time_audio"
      ],
      "production_ready": true,
      "description": "A BPF scheduler that prioritizes interactive workloads by detecting tasks with high voluntary context switch rates. Uses dual-priority queues and dynamic time slice budgets to ensure responsive performance for latency-sensitive applications.",
      "characteristics": {
        "interactive_detection": "voluntary_context_switches",
        "queue_structure": "dual_priority_queues",
        "time_slice_management": "dynamic_budget",
        "latency_optimization": true
      },
      "tuning_parameters": {
        "slice_us": {
          "description": "Time slice duration in microseconds",
          "default": "5000",
          "range": "1000-20000"
        },
        "nr_possible_cpus": {
          "description": "Number of possible CPUs to consider",
          "default": "auto-detected"
        },
        "stats": {
          "description": "Enable statistics collection",
          "default": "false"
        }
      },
      "selection_guide": {
        "when_to_use": "Choose when running interactive workloads alongside other CPU-intensive tasks",
        "pros": [
          "Excellent interactive responsiveness",
          "Automatic workload detection",
          "Production ready"
        ],
        "cons": [
          "May not optimize for pure batch workloads",
          "Limited configuration options"
        ],
        "tuning_tips": "Reduce slice_us for lower latency, enable stats to monitor performance"
      }
    },
    "scx_central": {
      "type": "centralized",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "none",
      "scheduling_algorithm": "central_dispatch",
      "use_case": "minimal_overhead",
      "workload_types": [
        "virtualization",
        "low_latency"
      ],
      "production_ready": false,
      "description": "A centralized scheduler where one CPU makes all scheduling decisions, allowing other cores to run with infinite slices and reduced timer overhead. Designed for minimal scheduling overhead scenarios.",
      "characteristics": {
        "single_cpu_dispatch": true,
        "infinite_slices": true,
        "timer_tick_reduction": true,
        "preemption_interval": "20ms"
      },
      "tuning_parameters": {
        "central_cpu": {
          "description": "CPU ID to use for central scheduling",
          "default": "0"
        }
      },
      "selection_guide": {
        "when_to_use": "For specialized scenarios requiring minimal scheduling overhead",
        "pros": [
          "Minimal scheduling overhead",
          "Reduced timer ticks"
        ],
        "cons": [
          "Not production ready",
          "No priority mechanism",
          "Single point of failure"
        ],
        "tuning_tips": "Not recommended for general workloads"
      }
    },
    "scx_chaos": {
      "type": "testing",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "chaotic",
      "scheduling_algorithm": "p2dq_with_chaos",
      "use_case": "testing_debugging",
      "workload_types": [
        "stress_testing",
        "debugging"
      ],
      "production_ready": false,
      "description": "A chaos testing scheduler based on scx_p2dq that introduces controlled randomness to stress test scheduling behavior and identify edge cases.",
      "characteristics": {
        "chaos_testing": true,
        "based_on": "scx_p2dq",
        "purpose": "development_testing"
      },
      "tuning_parameters": {
        "chaos_level": {
          "description": "Level of chaos to introduce",
          "default": "medium"
        }
      },
      "selection_guide": {
        "when_to_use": "Only for testing and debugging scheduling issues",
        "pros": [
          "Good for finding edge cases",
          "Testing scheduler robustness"
        ],
        "cons": [
          "Not production ready",
          "Unpredictable performance",
          "Testing only"
        ],
        "tuning_tips": "Use only in development environments"
      }
    },
    "scx_flash": {
      "type": "deadline-based",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "earliest_deadline_first",
      "scheduling_algorithm": "EDF",
      "use_case": "latency_sensitive",
      "workload_types": [
        "multimedia",
        "real_time_audio",
        "predictable_performance"
      ],
      "production_ready": true,
      "description": "An EDF scheduler that assigns dynamic latency weights based on CPU usage patterns. Tasks that release CPU early get higher priority, ensuring fairness and predictable performance.",
      "characteristics": {
        "dynamic_latency_weights": true,
        "early_cpu_release_priority": true,
        "fairness_focused": true,
        "overcommit_handling": true
      },
      "tuning_parameters": {
        "slice_us": {
          "description": "Base time slice duration",
          "default": "5000",
          "range": "1000-20000"
        },
        "latency_weight": {
          "description": "Weight for latency-sensitive tasks",
          "default": "1.0",
          "range": "0.1-5.0"
        }
      },
      "selection_guide": {
        "when_to_use": "When you need predictable latency for real-time applications",
        "pros": [
          "Predictable performance",
          "Fairness guarantee",
          "Production ready"
        ],
        "cons": [
          "May not optimize for pure throughput",
          "Complex latency weight tuning"
        ],
        "tuning_tips": "Tune latency weights based on your latency requirements"
      }
    },
    "scx_flatcg": {
      "type": "cgroup-aware",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "hierarchical_weight",
      "scheduling_algorithm": "flattened_cgroup_hierarchy",
      "use_case": "cpu_control",
      "workload_types": [
        "container_workloads",
        "resource_management"
      ],
      "production_ready": true,
      "description": "A high-performance cgroup-aware scheduler that flattens the cgroup hierarchy for better performance while maintaining hierarchical CPU control.",
      "characteristics": {
        "cgroup_hierarchy_flattening": true,
        "weight_based_control": true,
        "performance_optimization": true,
        "thundering_herd_limitation": true
      },
      "tuning_parameters": {
        "cgroup_weights": {
          "description": "CPU weight allocation for cgroups",
          "default": "1024",
          "range": "1-10000"
        }
      },
      "selection_guide": {
        "when_to_use": "When running workloads in containers with CPU resource guarantees",
        "pros": [
          "Excellent cgroup performance",
          "Precise resource control",
          "Production ready"
        ],
        "cons": [
          "Limited to cgroup use cases",
          "Thundering herd issues possible"
        ],
        "tuning_tips": "Set appropriate CPU weights for different container priorities"
      }
    },
    "scx_lavd": {
      "type": "latency-aware",
      "implementation": "BPF_hybrid",
      "user_space_component": "rust_topology",
      "priority_policy": "latency_criticality",
      "scheduling_algorithm": "LAVD",
      "use_case": "interactive_gaming",
      "workload_types": [
        "gaming",
        "interactive_applications"
      ],
      "production_ready": true,
      "description": "A sophisticated latency-aware scheduler that measures task latency criticality and uses virtual deadlines. Optimized for interactive workloads with NUMA and core-type awareness.",
      "characteristics": {
        "latency_criticality_measurement": true,
        "virtual_deadline_scheduling": true,
        "per_llc_domains": true,
        "core_type_awareness": true,
        "numa_awareness": true
      },
      "tuning_parameters": {
        "slice_us": {
          "description": "Time slice duration in microseconds",
          "default": "20000",
          "range": "5000-100000"
        },
        "interactive_threshold": {
          "description": "Threshold for interactive task detection",
          "default": "50",
          "range": "1-1000"
        },
        "balanced_profile": {
          "description": "Use balanced performance profile",
          "default": "true"
        }
      },
      "selection_guide": {
        "when_to_use": "Best choice for interactive applications requiring low latency",
        "pros": [
          "Excellent latency optimization",
          "Interactive workload detection",
          "NUMA aware",
          "Production ready"
        ],
        "cons": [
          "Complex configuration",
          "May not optimize for batch processing"
        ],
        "tuning_tips": "Use balanced profile, tune interactive threshold based on your application's behavior"
      }
    },
    "scx_layered": {
      "type": "multi-layer",
      "implementation": "BPF_hybrid",
      "user_space_component": "rust_policy",
      "priority_policy": "configurable_per_layer",
      "scheduling_algorithm": "layer_based",
      "use_case": "highly_configurable",
      "workload_types": [
        "custom_applications",
        "priority_services"
      ],
      "production_ready": true,
      "description": "A highly configurable multi-layer scheduler that allows creating custom layers with different scheduling policies. Perfect for dedicating specific CPU resources to different workload types while maintaining system responsiveness.",
      "characteristics": {
        "task_classification": true,
        "multiple_scheduling_policies": true,
        "cpu_utilization_guarantees": true,
        "topology_awareness": true,
        "performance_control": true,
        "numa_node_affinity": true
      },
      "tuning_parameters": {
        "config_file": {
          "description": "JSON configuration file defining layers",
          "default": "none"
        },
        "slice_us": {
          "description": "Time slice per layer in microseconds",
          "default": "20000",
          "range": "1000-100000"
        },
        "util_range": {
          "description": "CPU utilization range for layer growth/shrink",
          "default": "[0.8, 0.9]"
        },
        "perf": {
          "description": "Performance level (0-1024) for CPU frequency control",
          "default": "1024"
        }
      },
      "selection_guide": {
        "when_to_use": "Best choice for systems needing guaranteed CPU resources for specific workloads",
        "pros": [
          "Highly configurable",
          "CPU utilization guarantees",
          "NUMA awareness",
          "Production ready"
        ],
        "cons": [
          "Complex configuration",
          "Requires tuning",
          "Potential infeasible weights issue"
        ],
        "tuning_tips": "Create dedicated layers for important processes with appropriate CPU allocation, use NUMA affinity, tune slice_us based on latency requirements"
      }
    },
    "scx_mitosis": {
      "type": "unknown",
      "implementation": "unknown",
      "user_space_component": "unknown",
      "priority_policy": "unknown",
      "scheduling_algorithm": "unknown",
      "use_case": "unknown",
      "workload_types": [],
      "production_ready": false,
      "description": "No description available - empty documentation file",
      "characteristics": {
        "empty_description": true
      },
      "tuning_parameters": {},
      "selection_guide": {
        "when_to_use": "Not recommended - no documentation available",
        "pros": [],
        "cons": [
          "No documentation",
          "Unknown functionality"
        ],
        "tuning_tips": "Not recommended for use"
      }
    },
    "scx_nest": {
      "type": "core-affinity",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "frequency_optimization",
      "scheduling_algorithm": "warm_core_clustering",
      "use_case": "frequency_optimization",
      "workload_types": [
        "low_cpu_utilization",
        "frequency_sensitive"
      ],
      "production_ready": true,
      "description": "A frequency-optimized scheduler that keeps tasks on warm cores to maintain high CPU frequencies. Best for workloads with low CPU utilization that benefit from frequency scaling.",
      "characteristics": {
        "warm_core_prioritization": true,
        "frequency_optimization": true,
        "single_ccx_limitation": true,
        "cache_locality_awareness": true
      },
      "tuning_parameters": {
        "primary_core": {
          "description": "Primary core for task placement",
          "default": "0"
        },
        "spread_tasks": {
          "description": "Whether to spread tasks across cores",
          "default": "false"
        }
      },
      "selection_guide": {
        "when_to_use": "For workloads with low CPU utilization that benefit from high frequencies",
        "pros": [
          "High CPU frequencies",
          "Good cache locality",
          "Production ready"
        ],
        "cons": [
          "Limited to single CCX",
          "Not good for high CPU utilization",
          "May not scale well"
        ],
        "tuning_tips": "Best for single-socket systems with low-utilization workloads"
      }
    },
    "scx_p2dq": {
      "type": "load-balancing",
      "implementation": "BPF",
      "user_space_component": "metrics_only",
      "priority_policy": "slice_based_priority",
      "scheduling_algorithm": "pick_two_load_balancing",
      "use_case": "versatile",
      "workload_types": [
        "interactive",
        "batch_processing",
        "server_applications"
      ],
      "production_ready": true,
      "description": "A versatile scheduler with multi-layer queuing and slice-based task classification. Automatically detects interactive vs batch workloads and provides good load balancing.",
      "characteristics": {
        "multi_layer_queuing": true,
        "slice_based_classification": true,
        "interactive_detection": true,
        "load_balancing_across_llc": true,
        "configurable_time_slices": true
      },
      "tuning_parameters": {
        "nr_queues": {
          "description": "Number of dispatch queues",
          "default": "8",
          "range": "2-16"
        },
        "slice_us": {
          "description": "Base time slice duration",
          "default": "20000",
          "range": "5000-100000"
        },
        "interactive_ratio": {
          "description": "Ratio of interactive to batch tasks",
          "default": "0.5",
          "range": "0.1-0.9"
        }
      },
      "selection_guide": {
        "when_to_use": "Good for mixed workloads with both interactive and batch processing",
        "pros": [
          "Automatic workload detection",
          "Good load balancing",
          "Configurable queues",
          "Production ready"
        ],
        "cons": [
          "May need tuning for specific workloads",
          "Complex queue management"
        ],
        "tuning_tips": "Adjust interactive_ratio based on your workload mix, use fewer queues for simpler workloads"
      }
    },
    "scx_rusty": {
      "type": "multi-domain",
      "implementation": "BPF_hybrid",
      "user_space_component": "rust_load_balancing",
      "priority_policy": "domain_based",
      "scheduling_algorithm": "multi_domain_round_robin",
      "use_case": "flexible_architecture",
      "workload_types": [
        "general_purpose",
        "multi_architecture"
      ],
      "production_ready": true,
      "description": "A production-ready multi-domain scheduler with intelligent load balancing. Creates separate scheduling domains per LLC and provides excellent performance across different CPU architectures.",
      "characteristics": {
        "multi_domain_support": true,
        "per_llc_domains": true,
        "user_space_load_balancing": true,
        "configurable_thresholds": true,
        "architecture_flexibility": true
      },
      "tuning_parameters": {
        "slice_us": {
          "description": "Time slice duration in microseconds",
          "default": "20000",
          "range": "1000-100000"
        },
        "greedy_threshold": {
          "description": "Threshold for greedy task stealing",
          "default": "2",
          "range": "1-10"
        },
        "kthreads": {
          "description": "Schedule kernel threads",
          "default": "false"
        },
        "fifo_sched": {
          "description": "Use FIFO scheduling within domains",
          "default": "false"
        }
      },
      "selection_guide": {
        "when_to_use": "Best overall choice for general-purpose workloads, especially on multi-socket systems",
        "pros": [
          "Production ready",
          "Multi-architecture support",
          "Automatic load balancing",
          "Per-LLC domains"
        ],
        "cons": [
          "May not distinguish NUMA nodes well",
          "Potential infeasible weights issue"
        ],
        "tuning_tips": "Increase slice_us for batch workloads, adjust greedy_threshold for better load distribution, monitor domain utilization"
      }
    },
    "scx_simple": {
      "type": "basic",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "weighted_vtime_or_fifo",
      "scheduling_algorithm": "simple_vtime_or_fifo",
      "use_case": "simple_workloads",
      "workload_types": [
        "single_socket",
        "uniform_l3_cache"
      ],
      "production_ready": true,
      "description": "A simple scheduler with minimal complexity, supporting both weighted vtime and FIFO modes. Good for basic setups but may not optimize for complex workloads.",
      "characteristics": {
        "dual_mode_operation": true,
        "minimal_complexity": true,
        "single_socket_optimized": true,
        "starvation_risk_in_fifo": true
      },
      "tuning_parameters": {
        "fifo": {
          "description": "Use FIFO mode instead of vtime",
          "default": "false"
        },
        "slice_us": {
          "description": "Time slice duration",
          "default": "20000",
          "range": "1000-100000"
        }
      },
      "selection_guide": {
        "when_to_use": "Only for simple single-socket systems with basic workload needs",
        "pros": [
          "Simple configuration",
          "Low overhead",
          "Production ready"
        ],
        "cons": [
          "Limited scalability",
          "May not optimize complex workloads",
          "FIFO mode risk"
        ],
        "tuning_tips": "Use vtime mode, avoid FIFO to prevent starvation"
      }
    },
    "scx_tickless": {
      "type": "server-oriented",
      "implementation": "BPF",
      "user_space_component": "minimal",
      "priority_policy": "global_queue",
      "scheduling_algorithm": "primary_cpu_distribution",
      "use_case": "server_cloud_hpc",
      "workload_types": [
        "cloud_computing",
        "virtualization",
        "hpc"
      ],
      "production_ready": false,
      "description": "An experimental server-oriented scheduler designed to reduce OS noise by minimizing timer ticks. Uses primary CPU pools for scheduling decisions.",
      "characteristics": {
        "tick_reduction": true,
        "primary_cpu_pool": true,
        "os_noise_reduction": true,
        "global_task_queue": true,
        "configurable_frequency": true,
        "nohz_full_requirement": true
      },
      "tuning_parameters": {
        "primary_domain": {
          "description": "CPU mask for primary scheduling CPUs",
          "default": "0"
        },
        "frequency": {
          "description": "Scheduling frequency",
          "default": "100"
        }
      },
      "selection_guide": {
        "when_to_use": "Not recommended for general use - experimental scheduler",
        "pros": [
          "Reduced OS noise",
          "Good for HPC"
        ],
        "cons": [
          "Not production ready",
          "Experimental",
          "Requires nohz_full"
        ],
        "tuning_tips": "Not recommended for general workloads"
      }
    },
    "scx_userland": {
      "type": "user-space",
      "implementation": "user_space",
      "user_space_component": "full",
      "priority_policy": "weighted_vtime",
      "scheduling_algorithm": "user_space_vtime",
      "use_case": "educational_demonstration",
      "workload_types": [
        "demonstration",
        "educational"
      ],
      "production_ready": false,
      "description": "A fully user-space scheduler for educational purposes. Demonstrates user-space scheduling concepts but has performance limitations.",
      "characteristics": {
        "full_user_space_implementation": true,
        "ordered_list_scheduling": true,
        "development_advantages": true,
        "deadlock_risk": true,
        "performance_overhead": true
      },
      "tuning_parameters": {
        "slice_us": {
          "description": "Time slice duration",
          "default": "20000"
        }
      },
      "selection_guide": {
        "when_to_use": "Only for educational purposes or experimental research",
        "pros": [
          "Educational value",
          "User-space debugging",
          "Flexibility"
        ],
        "cons": [
          "Not production ready",
          "Performance overhead",
          "Deadlock risk"
        ],
        "tuning_tips": "Use only for learning or experimental purposes"
      }
    }
  }
}